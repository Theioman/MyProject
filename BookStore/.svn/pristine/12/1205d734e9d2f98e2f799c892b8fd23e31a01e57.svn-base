package com.book.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;
import com.book.domain.Book;
import com.book.service.BookService;

@Controller
public class BookController {
	@Autowired
	private BookService bookService;
	
	/**
	 * 通过类型查找书并跳转到列表页面显示
	 * @return
	 */
	@RequestMapping("findBookByType.do")
	public ModelAndView findBookByType(String btype,Integer pagenum) {
		if(pagenum==null||pagenum<=0) {
			pagenum=1;
		}
		int pageCount=bookService.findBookTypeCount(btype);
		int page=pageCount/20;
		if(pageCount%20>0||pageCount/20==0)page+=1;
		if(pagenum>page) {
			pagenum=page;
		}
		ModelAndView mv=new ModelAndView();
		mv.setViewName("list");
		List<Book> books=bookService.findBookByType(btype,pagenum);
		mv.addObject("books", books);
		mv.addObject("pagenum", pagenum);
		mv.addObject("page", page);
		mv.addObject("btype", btype);
		return mv;
	}
	/**
	 * 根据请求选择执行对应方法
	 * @param condition
	 * @param pagenum
	 * @return
	 * @throws UnsupportedEncodingException
	 */
	@RequestMapping("pageRequest.do")
	public String pageRequest(String condition,Integer pagenum,String btype) throws UnsupportedEncodingException{
		if(btype!=null&&(!"".equals(btype))) {
			System.out.println("2"+btype);
			String url="redirect:findBookByType.do?btype="+java.net.URLEncoder.encode(btype, "UTF-8");
			if(pagenum==null) pagenum=1;
				url="redirect:findBookByType.do?btype="+java.net.URLEncoder.encode(btype, "UTF-8")+"&pagenum="+pagenum;
			return url;
		}
		else if(condition!=null&&!("".equals(condition))) {
			String url="redirect:findBookByCondition.do?condition="+java.net.URLEncoder.encode(condition, "UTF-8");
			if(pagenum==null) pagenum=1;
				url="redirect:findBookByCondition.do?condition="+java.net.URLEncoder.encode(condition, "UTF-8")+"&pagenum="+pagenum;
			return url;
		}
		else {
			if(pagenum==null)pagenum=1;
			return "redirect:findAllBook.do?pagenum="+pagenum;
		}
	}
	/**
	 * 查询所有书并跳到商品列表页面
	 * @param pagenum
	 * @return
	 */
	@RequestMapping("findAllBook.do")
	public ModelAndView findAllBook(Integer pagenum) {
		if(pagenum==null||pagenum<=0) {
			pagenum=1;
		}
		ModelAndView mv=new ModelAndView();
		int pageCount=bookService.findBooksCount();
		int page=pageCount/20;
		if(pageCount%20>0||pageCount/20==0)page+=1;
		if(pagenum>page) {
			pagenum=page;
		}
		List<Book> list=bookService.findAllBook(pagenum);
		mv.addObject("pagenum", pagenum);
		mv.addObject("page", page);
		mv.addObject("books", list);
		mv.setViewName("list");
		return mv;
	}
	/**
	 * 根据条件查找书  （书名或类型）
	 * @param condition
	 * @param pagenum
	 * @return
	 */
	@RequestMapping("findBookByCondition.do")
	public ModelAndView findBookByCondition(String condition,Integer pagenum){
		System.out.println(condition);
		if(pagenum==null||pagenum<=0) {
			pagenum=1;
		}
		int pageCount=bookService.findBookByConditionCount(condition);
		int page=pageCount/20;
		if(pageCount%20>0||pageCount/20==0)page+=1;
		if(pagenum>page) {
			pagenum=page;
		}
		ModelAndView mv=new ModelAndView();
		List<Book> books=bookService.findBookByCondition(condition,pagenum);
		mv.setViewName("list");
		mv.addObject("condition", condition);
		mv.addObject("pagenum", pagenum);
		mv.addObject("page", page);	
		mv.addObject("books", books);
		return mv;
	}
	/**
	 * 跳转到首页 并查询显示首页的商品信息
	 * @param session
	 * @return
	 */
	@RequestMapping("toIndex.do")
	public ModelAndView toIndex(HttpSession session){
	ModelAndView mav=new ModelAndView();
	List<Book> pythons=bookService.findBookByBtype("Python");
	System.out.println(pythons.toString());
	List<Book> javaScripts=bookService.findBookByBtype("JavaScript");
	List<Book> mathss=bookService.findBookByBtype("数据结构与算法");
	List<Book> studies=bookService.findBookByBtype("机器学习");
	List<Book> syss=bookService.findBookByBtype("操作系统");
	List<Book> sqlss=bookService.findBookByBtype("数据库");
	session.setAttribute("pythons", pythons);
	session.setAttribute("javaScripts", javaScripts);
	session.setAttribute("maths", mathss);
	session.setAttribute("studies", studies);
	session.setAttribute("syss", syss);
	session.setAttribute("sqlss", sqlss);
	session.setAttribute("is", "1");
	mav.setViewName("index");
	return mav;
	}

	/**
	 * 跳转到书详情页 并显示相关信息
	 */
	/*@RequestMapping("bookDetail.do")
	public ModelAndView bookDetail(Integer id) {
		ModelAndView mv=new ModelAndView();
		Book book=bookService.findBookById(id);
		System.out.println(book);
		mv.addObject("book", book);
		mv.setViewName("detail");
		return mv;
	}*/
    @RequestMapping("bookDetail.do")
	public String bookDetail(HttpSession session,Integer id) {
		Book book=bookService.findBookById(id);
        session.setAttribute("book", book);
		return "redirect:ifRidIsExists.do";
	}

     
}
